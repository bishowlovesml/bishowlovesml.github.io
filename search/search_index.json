{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Machine Learning","text":""},{"location":"#steps","title":"Steps","text":""},{"location":"#step-1-get-comfortable-with-prerequisites","title":"Step 1: Get Comfortable with Prerequisites","text":"<p>Before jumping into ML directly, make sure you're solid on:</p> <p>Math Basics (not scary, I promise!):</p> <ul> <li>Linear algebra (vectors, matrices)</li> <li>Calculus (basic derivatives)</li> <li>Probability &amp; statistics (mean, variance, distributions)</li> </ul> <p>Programming:</p> <ul> <li> <p>Learn Python \u2014 it's the most popular ML language.</p> <ul> <li>Libraries to know: <code>NumPy</code>, <code>Pandas</code>, <code>Matplotlib</code></li> </ul> </li> </ul> <p>\ud83e\udde0 Tip: Use platforms like Khan Academy (for math) and Python tutorials on Codecademy or freeCodeCamp.</p>"},{"location":"#step-2-understand-what-ml-is","title":"Step 2: Understand What ML Is","text":"<p>Start with the core ideas:</p> <ul> <li> <p>What is Machine Learning?</p> </li> <li> <p>Difference between:</p> <ul> <li>Supervised learning (e.g., regression, classification)</li> <li>Unsupervised learning (e.g., clustering)</li> <li>Reinforcement learning</li> </ul> </li> </ul> <p>\ud83d\udcfa Good starting video: \u201cHow Machines Learn\u201d by 3Blue1Brown</p>"},{"location":"#step-3-hands-on-with-ml-tools","title":"Step 3: Hands-On with ML Tools","text":"<p>Once you have the basics, dive into real ML with:</p> <ul> <li>scikit-learn (classic library for beginners)</li> <li>TensorFlow or PyTorch (for deep learning)</li> <li>Google Colab (free tool to run Python/ML code in the browser)</li> </ul> <p>\ud83d\udee0 Beginner Projects:</p> <ul> <li>Predict housing prices</li> <li>Spam email classifier</li> <li>Image classifier with MNIST dataset</li> </ul>"},{"location":"#step-4-take-online-courses","title":"Step 4: Take Online Courses","text":"<p>Some awesome ones:</p> <ul> <li>\ud83d\udcd8 Coursera - Andrew Ng's ML course (legendary beginner course)</li> <li>\ud83d\udcd8 fast.ai (hands-on deep learning)</li> <li>\ud83d\udcd8 Google\u2019s Machine Learning Crash Course</li> </ul>"},{"location":"#step-5-build-projects-share","title":"Step 5: Build Projects &amp; Share","text":"<p>You learn best by doing. Try:</p> <ul> <li>Creating ML models with your own data</li> <li>Participating in Kaggle competitions</li> <li>Writing blogs or GitHub repos about what you\u2019ve built</li> </ul>"},{"location":"#bonus-stay-curious","title":"Bonus: Stay Curious","text":"<ul> <li>Follow ML researchers on Twitter/X</li> <li>Read papers (start with summaries on sites like Papers With Code)</li> <li>Join communities like Reddit's r/MachineLearning or ML Discords</li> </ul>"},{"location":"#learning-by-doing-or-applying","title":"Learning by Doing or Applying","text":"<p>Absolutely, \"learning by doing\" is the best way to truly understand machine learning \u2014 and it\u2019s awesome that you\u2019re thinking about applying it to real-world apps, like web or mobile applications. Let\u2019s break down how you can actually use ML in a browser, desktop, or mobile app:</p> \ud83e\udde0 Step-by-Step: How to Use Machine Learning in Apps <p>1. Build the ML Model</p> <p>Use Python and libraries like:</p> <ul> <li><code>scikit-learn</code> for basic ML</li> <li><code>TensorFlow</code> / <code>Keras</code> or <code>PyTorch</code> for deep learning</li> <li>Train your model using Jupyter Notebook or Google Colab</li> </ul> <p>\u2705 Example: Build a model that predicts house prices or detects if an image contains a cat.</p> <p>2. Save the Model</p> <p>After training:</p> <ul> <li> <p>Save it using:</p> python<pre><code>import joblib\njoblib.dump(model, 'model.pkl')\n</code></pre> <p>or for deep learning:</p> python<pre><code>model.save('model.h5')\n</code></pre> </li> </ul> <p>3. Use It in Applications</p> <p>Now bring it into the real world!</p>"},{"location":"#web-browser-desktop-app-mobile-app","title":"Web Browser, Desktop App &amp; Mobile App","text":"Example A. Web Browser (Web App)B. Desktop AppC. Mobile App (Android/iOS) <p>Use:</p> <ul> <li>Python backend (Flask or FastAPI)</li> <li>Frontend (HTML/CSS + JS or React)</li> </ul> <p>\ud83d\udd27 Simple Workflow:</p> <ul> <li>Backend loads the model</li> <li>User uploads data/image via the web</li> <li>Backend runs prediction</li> <li>Sends result back to frontend</li> </ul> <p>\ud83d\udee0 Tools:</p> <ul> <li>Flask + HTML (very simple to set up)</li> <li>Streamlit (perfect for quick ML dashboards)</li> <li>Gradio (builds interactive ML interfaces in seconds)</li> </ul> <p>\ud83d\udd17 Example:</p> bash<pre><code>pip install gradio\n</code></pre> python<pre><code>import gradio as gr\ndef predict(text):\n    return model.predict([text])\ngr.Interface(fn=predict, inputs=\"text\", outputs=\"label\").launch()\n</code></pre> <p>Use:</p> <ul> <li>PyQt or Tkinter (for GUI)</li> <li>Embed your model in the Python app</li> <li>You can even package it with PyInstaller to make an <code>.exe</code> for Windows</li> </ul> <p>\ud83d\udd27 Tools:</p> <ul> <li>PyQt5</li> <li>Tkinter</li> <li>PyInstaller (<code>pyinstaller myapp.py</code>)</li> </ul> <p>There are 2 main ways to do this:</p> <p>Option 1: Use TensorFlow Lite (TFLite)</p> <ul> <li> <p>Convert your model:</p> <pre><code>import tensorflow as tf\nconverter = tf.lite.TFLiteConverter.from_saved_model('model_path')\ntflite_model = converter.convert()\n</code></pre> </li> <li> <p>Use it in Android Studio (Java/Kotlin) or Flutter</p> </li> </ul> <p>Option 2: Use an API</p> <ul> <li>Host your model online (e.g., Flask + Heroku)</li> <li>Your mobile app sends data \u2192 gets prediction from API</li> </ul> <p>\ud83e\udde0 Easier for beginners!</p> <p>\ud83d\ude80 Project Ideas You Can Try</p> <ul> <li>Image Classifier Web App (e.g. dog vs cat)</li> <li>Voice Command Mobile App (uses ML to understand spoken commands)</li> <li>Text Sentiment Analyzer (web app that tells if a sentence is happy/sad)</li> <li>Face Detection Desktop Tool</li> </ul> Mkdocs serve in network <ol> <li> <p>Use the <code>--dev-addr</code> Option:</p> bash<pre><code>mkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre> </li> <li> <p>Find Your IP Address:</p> Linux<pre><code>ifconfig\n#or\nip addr\n\n# easier\nhostname -I\n</code></pre> </li> <li> <p>Access Documentation:</p> <p>Once you have your IP address, you can access your documentation from any device on the same network by visiting <code>http://your_ip_address:8000</code> in a web browser.</p> </li> </ol>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""}]}